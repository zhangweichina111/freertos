###############################################################################
#                                                                             #
#                                                       03/Jan/2016  16:21:35 #
# IAR ANSI C/C++ Compiler V6.40.4.24170/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\project\freertos\FreeRTOS\Demo\Common\Minimal\blockti #
#                    m.c                                                      #
#    Command line =  D:\project\freertos\FreeRTOS\Demo\Common\Minimal\blockti #
#                    m.c -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN                #
#                    D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\D #
#                    ebug\List\ --diag_suppress Pa082,pe191 -o                #
#                    D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\D #
#                    ebug\Obj\ --no_cse --no_unroll --no_inline               #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.4                           #
#                    Evaluation\arm\INC\c\DLib_Config_Full.h" -I              #
#                    D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\. #
#                    \ -I D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_ #
#                    IAR\STM32F10xFWLib\inc\ -I D:\project\freertos\FreeRTOS\ #
#                    Demo\CORTEX_STM32F103_IAR\..\..\Source\include\ -I       #
#                    D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\. #
#                    .\common\include\ -Ol --use_c++_inline                   #
#                    --require_prototypes                                     #
#    List file    =  D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\D #
#                    ebug\List\blocktim.lst                                   #
#    Object file  =  D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\D #
#                    ebug\Obj\blocktim.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\project\freertos\FreeRTOS\Demo\Common\Minimal\blocktim.c
      1          /*
      2              FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
      3              All rights reserved
      4          
      5              VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
      6          
      7              This file is part of the FreeRTOS distribution.
      8          
      9              FreeRTOS is free software; you can redistribute it and/or modify it under
     10              the terms of the GNU General Public License (version 2) as published by the
     11              Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
     12          
     13              ***************************************************************************
     14              >>!   NOTE: The modification to the GPL is included to allow you to     !<<
     15              >>!   distribute a combined work that includes FreeRTOS without being   !<<
     16              >>!   obliged to provide the source code for proprietary components     !<<
     17              >>!   outside of the FreeRTOS kernel.                                   !<<
     18              ***************************************************************************
     19          
     20              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
     21              WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     22              FOR A PARTICULAR PURPOSE.  Full license text is available on the following
     23              link: http://www.freertos.org/a00114.html
     24          
     25              ***************************************************************************
     26               *                                                                       *
     27               *    FreeRTOS provides completely free yet professionally developed,    *
     28               *    robust, strictly quality controlled, supported, and cross          *
     29               *    platform software that is more than just the market leader, it     *
     30               *    is the industry's de facto standard.                               *
     31               *                                                                       *
     32               *    Help yourself get started quickly while simultaneously helping     *
     33               *    to support the FreeRTOS project by purchasing a FreeRTOS           *
     34               *    tutorial book, reference manual, or both:                          *
     35               *    http://www.FreeRTOS.org/Documentation                              *
     36               *                                                                       *
     37              ***************************************************************************
     38          
     39              http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
     40              the FAQ page "My application does not run, what could be wrong?".  Have you
     41              defined configASSERT()?
     42          
     43              http://www.FreeRTOS.org/support - In return for receiving this top quality
     44              embedded software for free we request you assist our global community by
     45              participating in the support forum.
     46          
     47              http://www.FreeRTOS.org/training - Investing in training allows your team to
     48              be as productive as possible as early as possible.  Now you can receive
     49              FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
     50              Ltd, and the world's leading authority on the world's leading RTOS.
     51          
     52              http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
     53              including FreeRTOS+Trace - an indispensable productivity tool, a DOS
     54              compatible FAT file system, and our tiny thread aware UDP/IP stack.
     55          
     56              http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
     57              Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
     58          
     59              http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
     60              Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
     61              licenses offer ticketed support, indemnification and commercial middleware.
     62          
     63              http://www.SafeRTOS.com - High Integrity Systems also provide a safety
     64              engineered and independently SIL3 certified version for use in safety and
     65              mission critical applications that require provable dependability.
     66          
     67              1 tab == 4 spaces!
     68          */
     69          
     70          /*
     71           * This file contains some test scenarios that ensure tasks do not exit queue
     72           * send or receive functions prematurely.  A description of the tests is
     73           * included within the code.
     74           */
     75          
     76          /* Kernel includes. */
     77          #include "FreeRTOS.h"
     78          #include "task.h"
     79          #include "queue.h"
     80          
     81          /* Demo includes. */
     82          #include "blocktim.h"
     83          
     84          /* Task priorities.  Allow these to be overridden. */
     85          #ifndef bktPRIMARY_PRIORITY
     86          	#define bktPRIMARY_PRIORITY		( configMAX_PRIORITIES - 3 )
     87          #endif
     88          
     89          #ifndef bktSECONDARY_PRIORITY
     90          	#define bktSECONDARY_PRIORITY	( configMAX_PRIORITIES - 4 )
     91          #endif
     92          
     93          /* Task behaviour. */
     94          #define bktQUEUE_LENGTH				( 5 )
     95          #define bktSHORT_WAIT				( ( ( TickType_t ) 20 ) / portTICK_PERIOD_MS )
     96          #define bktPRIMARY_BLOCK_TIME		( 10 )
     97          #define bktALLOWABLE_MARGIN			( 15 )
     98          #define bktTIME_TO_BLOCK			( 175 )
     99          #define bktDONT_BLOCK				( ( TickType_t ) 0 )
    100          #define bktRUN_INDICATOR			( ( UBaseType_t ) 0x55 )
    101          
    102          /* The queue on which the tasks block. */
    103          static QueueHandle_t xTestQueue;
    104          
    105          /* Handle to the secondary task is required by the primary task for calls
    106          to vTaskSuspend/Resume(). */
    107          static TaskHandle_t xSecondary;
    108          
    109          /* Used to ensure that tasks are still executing without error. */
    110          static volatile BaseType_t xPrimaryCycles = 0, xSecondaryCycles = 0;
    111          static volatile BaseType_t xErrorOccurred = pdFALSE;
    112          
    113          /* Provides a simple mechanism for the primary task to know when the
    114          secondary task has executed. */
    115          static volatile UBaseType_t xRunIndicator;
    116          
    117          /* The two test tasks.  Their behaviour is commented within the files. */
    118          static void vPrimaryBlockTimeTestTask( void *pvParameters );
    119          static void vSecondaryBlockTimeTestTask( void *pvParameters );
    120          
    121          /*-----------------------------------------------------------*/
    122          
    123          void vCreateBlockTimeTasks( void )
    124          {
    125          	/* Create the queue on which the two tasks block. */
    126              xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( BaseType_t ) );
    127          
    128          	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
    129          	in use.  The queue registry is provided as a means for kernel aware
    130          	debuggers to locate queues and has no purpose if a kernel aware debugger
    131          	is not being used.  The call to vQueueAddToRegistry() will be removed
    132          	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
    133          	defined to be less than 1. */
    134          	vQueueAddToRegistry( xTestQueue, "Block_Time_Queue" );
    135          
    136          	/* Create the two test tasks. */
    137          	xTaskCreate( vPrimaryBlockTimeTestTask, "BTest1", configMINIMAL_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
    138          	xTaskCreate( vSecondaryBlockTimeTestTask, "BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
    139          }
    140          /*-----------------------------------------------------------*/
    141          
    142          static void vPrimaryBlockTimeTestTask( void *pvParameters )
    143          {
    144          BaseType_t xItem, xData;
    145          TickType_t xTimeWhenBlocking;
    146          TickType_t xTimeToBlock, xBlockedTime;
    147          
    148          	( void ) pvParameters;
    149          
    150          	for( ;; )
    151          	{
    152          		/*********************************************************************
    153                  Test 1
    154          
    155                  Simple block time wakeup test on queue receives. */
    156          		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    157          		{
    158          			/* The queue is empty. Attempt to read from the queue using a block
    159          			time.  When we wake, ensure the delta in time is as expected. */
    160          			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
    161          
    162          			xTimeWhenBlocking = xTaskGetTickCount();
    163          
    164          			/* We should unblock after xTimeToBlock having not received
    165          			anything on the queue. */
    166          			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
    167          			{
    168          				xErrorOccurred = pdTRUE;
    169          			}
    170          
    171          			/* How long were we blocked for? */
    172          			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    173          
    174          			if( xBlockedTime < xTimeToBlock )
    175          			{
    176          				/* Should not have blocked for less than we requested. */
    177          				xErrorOccurred = pdTRUE;
    178          			}
    179          
    180          			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
    181          			{
    182          				/* Should not have blocked for longer than we requested,
    183          				although we would not necessarily run as soon as we were
    184          				unblocked so a margin is allowed. */
    185          				xErrorOccurred = pdTRUE;
    186          			}
    187          		}
    188          
    189          		/*********************************************************************
    190                  Test 2
    191          
    192                  Simple block time wakeup test on queue sends.
    193          
    194          		First fill the queue.  It should be empty so all sends should pass. */
    195          		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    196          		{
    197          			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    198          			{
    199          				xErrorOccurred = pdTRUE;
    200          			}
    201          
    202          			#if configUSE_PREEMPTION == 0
    203          				taskYIELD();
    204          			#endif
    205          		}
    206          
    207          		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    208          		{
    209          			/* The queue is full. Attempt to write to the queue using a block
    210          			time.  When we wake, ensure the delta in time is as expected. */
    211          			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
    212          
    213          			xTimeWhenBlocking = xTaskGetTickCount();
    214          
    215          			/* We should unblock after xTimeToBlock having not received
    216          			anything on the queue. */
    217          			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
    218          			{
    219          				xErrorOccurred = pdTRUE;
    220          			}
    221          
    222          			/* How long were we blocked for? */
    223          			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    224          
    225          			if( xBlockedTime < xTimeToBlock )
    226          			{
    227          				/* Should not have blocked for less than we requested. */
    228          				xErrorOccurred = pdTRUE;
    229          			}
    230          
    231          			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
    232          			{
    233          				/* Should not have blocked for longer than we requested,
    234          				although we would not necessarily run as soon as we were
    235          				unblocked so a margin is allowed. */
    236          				xErrorOccurred = pdTRUE;
    237          			}
    238          		}
    239          
    240          		/*********************************************************************
    241                  Test 3
    242          
    243          		Wake the other task, it will block attempting to post to the queue.
    244          		When we read from the queue the other task will wake, but before it
    245          		can run we will post to the queue again.  When the other task runs it
    246          		will find the queue still full, even though it was woken.  It should
    247          		recognise that its block time has not expired and return to block for
    248          		the remains of its block time.
    249          
    250          		Wake the other task so it blocks attempting to post to the already
    251          		full queue. */
    252          		xRunIndicator = 0;
    253          		vTaskResume( xSecondary );
    254          
    255          		/* We need to wait a little to ensure the other task executes. */
    256          		while( xRunIndicator != bktRUN_INDICATOR )
    257          		{
    258          			/* The other task has not yet executed. */
    259          			vTaskDelay( bktSHORT_WAIT );
    260          		}
    261          		/* Make sure the other task is blocked on the queue. */
    262          		vTaskDelay( bktSHORT_WAIT );
    263          		xRunIndicator = 0;
    264          
    265          		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    266          		{
    267          			/* Now when we make space on the queue the other task should wake
    268          			but not execute as this task has higher priority. */
    269          			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    270          			{
    271          				xErrorOccurred = pdTRUE;
    272          			}
    273          
    274          			/* Now fill the queue again before the other task gets a chance to
    275          			execute.  If the other task had executed we would find the queue
    276          			full ourselves, and the other task have set xRunIndicator. */
    277          			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    278          			{
    279          				xErrorOccurred = pdTRUE;
    280          			}
    281          
    282          			if( xRunIndicator == bktRUN_INDICATOR )
    283          			{
    284          				/* The other task should not have executed. */
    285          				xErrorOccurred = pdTRUE;
    286          			}
    287          
    288          			/* Raise the priority of the other task so it executes and blocks
    289          			on the queue again. */
    290          			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    291          
    292          			/* The other task should now have re-blocked without exiting the
    293          			queue function. */
    294          			if( xRunIndicator == bktRUN_INDICATOR )
    295          			{
    296          				/* The other task should not have executed outside of the
    297          				queue function. */
    298          				xErrorOccurred = pdTRUE;
    299          			}
    300          
    301          			/* Set the priority back down. */
    302          			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
    303          		}
    304          
    305          		/* Let the other task timeout.  When it unblockes it will check that it
    306          		unblocked at the correct time, then suspend itself. */
    307          		while( xRunIndicator != bktRUN_INDICATOR )
    308          		{
    309          			vTaskDelay( bktSHORT_WAIT );
    310          		}
    311          		vTaskDelay( bktSHORT_WAIT );
    312          		xRunIndicator = 0;
    313          
    314          
    315          		/*********************************************************************
    316                  Test 4
    317          
    318          		As per test 3 - but with the send and receive the other way around.
    319          		The other task blocks attempting to read from the queue.
    320          
    321          		Empty the queue.  We should find that it is full. */
    322          		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    323          		{
    324          			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    325          			{
    326          				xErrorOccurred = pdTRUE;
    327          			}
    328          		}
    329          
    330          		/* Wake the other task so it blocks attempting to read from  the
    331          		already	empty queue. */
    332          		vTaskResume( xSecondary );
    333          
    334          		/* We need to wait a little to ensure the other task executes. */
    335          		while( xRunIndicator != bktRUN_INDICATOR )
    336          		{
    337          			vTaskDelay( bktSHORT_WAIT );
    338          		}
    339          		vTaskDelay( bktSHORT_WAIT );
    340          		xRunIndicator = 0;
    341          
    342          		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    343          		{
    344          			/* Now when we place an item on the queue the other task should
    345          			wake but not execute as this task has higher priority. */
    346          			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    347          			{
    348          				xErrorOccurred = pdTRUE;
    349          			}
    350          
    351          			/* Now empty the queue again before the other task gets a chance to
    352          			execute.  If the other task had executed we would find the queue
    353          			empty ourselves, and the other task would be suspended. */
    354          			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    355          			{
    356          				xErrorOccurred = pdTRUE;
    357          			}
    358          
    359          			if( xRunIndicator == bktRUN_INDICATOR )
    360          			{
    361          				/* The other task should not have executed. */
    362          				xErrorOccurred = pdTRUE;
    363          			}
    364          
    365          			/* Raise the priority of the other task so it executes and blocks
    366          			on the queue again. */
    367          			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    368          
    369          			/* The other task should now have re-blocked without exiting the
    370          			queue function. */
    371          			if( xRunIndicator == bktRUN_INDICATOR )
    372          			{
    373          				/* The other task should not have executed outside of the
    374          				queue function. */
    375          				xErrorOccurred = pdTRUE;
    376          			}
    377          			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
    378          		}
    379          
    380          		/* Let the other task timeout.  When it unblockes it will check that it
    381          		unblocked at the correct time, then suspend itself. */
    382          		while( xRunIndicator != bktRUN_INDICATOR )
    383          		{
    384          			vTaskDelay( bktSHORT_WAIT );
    385          		}
    386          		vTaskDelay( bktSHORT_WAIT );
    387          
    388          		xPrimaryCycles++;
    389          	}
    390          }
    391          /*-----------------------------------------------------------*/
    392          
    393          static void vSecondaryBlockTimeTestTask( void *pvParameters )
    394          {
    395          TickType_t xTimeWhenBlocking, xBlockedTime;
    396          BaseType_t xData;
    397          
    398          	( void ) pvParameters;
    399          
    400          	for( ;; )
    401          	{
    402          		/*********************************************************************
    403                  Test 1 and 2
    404          
    405          		This task does does not participate in these tests. */
    406          		vTaskSuspend( NULL );
    407          
    408          		/*********************************************************************
    409                  Test 3
    410          
    411          		The first thing we do is attempt to read from the queue.  It should be
    412          		full so we block.  Note the time before we block so we can check the
    413          		wake time is as per that expected. */
    414          		xTimeWhenBlocking = xTaskGetTickCount();
    415          
    416          		/* We should unblock after bktTIME_TO_BLOCK having not sent
    417          		anything to the queue. */
    418          		xData = 0;
    419          		xRunIndicator = bktRUN_INDICATOR;
    420          		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
    421          		{
    422          			xErrorOccurred = pdTRUE;
    423          		}
    424          
    425          		/* How long were we inside the send function? */
    426          		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    427          
    428          		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
    429          		if( xBlockedTime < bktTIME_TO_BLOCK )
    430          		{
    431          			xErrorOccurred = pdTRUE;
    432          		}
    433          
    434          		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
    435          		either.  A margin is permitted as we would not necessarily run as
    436          		soon as we unblocked. */
    437          		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
    438          		{
    439          			xErrorOccurred = pdTRUE;
    440          		}
    441          
    442          		/* Suspend ready for test 3. */
    443          		xRunIndicator = bktRUN_INDICATOR;
    444          		vTaskSuspend( NULL );
    445          
    446          		/*********************************************************************
    447                  Test 4
    448          
    449          		As per test three, but with the send and receive reversed. */
    450          		xTimeWhenBlocking = xTaskGetTickCount();
    451          
    452          		/* We should unblock after bktTIME_TO_BLOCK having not received
    453          		anything on the queue. */
    454          		xRunIndicator = bktRUN_INDICATOR;
    455          		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
    456          		{
    457          			xErrorOccurred = pdTRUE;
    458          		}
    459          
    460          		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    461          
    462          		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
    463          		if( xBlockedTime < bktTIME_TO_BLOCK )
    464          		{
    465          			xErrorOccurred = pdTRUE;
    466          		}
    467          
    468          		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
    469          		either.  A margin is permitted as we would not necessarily run as soon
    470          		as we unblocked. */
    471          		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
    472          		{
    473          			xErrorOccurred = pdTRUE;
    474          		}
    475          
    476          		xRunIndicator = bktRUN_INDICATOR;
    477          
    478          		xSecondaryCycles++;
    479          	}
    480          }
    481          /*-----------------------------------------------------------*/
    482          
    483          BaseType_t xAreBlockTimeTestTasksStillRunning( void )
    484          {
    485          static BaseType_t xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
    486          BaseType_t xReturn = pdPASS;
    487          
    488          	/* Have both tasks performed at least one cycle since this function was
    489          	last called? */
    490          	if( xPrimaryCycles == xLastPrimaryCycleCount )
    491          	{
    492          		xReturn = pdFAIL;
    493          	}
    494          
    495          	if( xSecondaryCycles == xLastSecondaryCycleCount )
    496          	{
    497          		xReturn = pdFAIL;
    498          	}
    499          
    500          	if( xErrorOccurred == pdTRUE )
    501          	{
    502          		xReturn = pdFAIL;
    503          	}
    504          
    505          	xLastSecondaryCycleCount = xSecondaryCycles;
    506          	xLastPrimaryCycleCount = xPrimaryCycles;
    507          
    508          	return xReturn;
    509          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  vCreateBlockTimeTasks
             24 -> xQueueGenericCreate
             24 -> xTaskGenericCreate
        8  vPrimaryBlockTimeTestTask
              8 -> vTaskDelay
              8 -> vTaskPrioritySet
              8 -> vTaskResume
              8 -> xQueueGenericReceive
              8 -> xQueueGenericSend
              8 -> xTaskGetTickCount
        8  vSecondaryBlockTimeTestTask
              8 -> vTaskSuspend
              8 -> xQueueGenericReceive
              8 -> xQueueGenericSend
              8 -> xTaskGetTickCount
        0  xAreBlockTimeTestTasksStillRunning


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "BTest1">
       8  ?<Constant "BTest2">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      98  vCreateBlockTimeTasks
     638  vPrimaryBlockTimeTestTask
     166  vSecondaryBlockTimeTestTask
      58  xAreBlockTimeTestTasksStillRunning
       4  xErrorOccurred
       4  xLastPrimaryCycleCount
       4  xLastSecondaryCycleCount
       4  xPrimaryCycles
       4  xRunIndicator
       4  xSecondary
       4  xSecondaryCycles
       4  xTestQueue

 
    32 bytes in section .bss
    16 bytes in section .rodata
 1 000 bytes in section .text
 
 1 000 bytes of CODE  memory
    16 bytes of CONST memory
    32 bytes of DATA  memory

Errors: none
Warnings: none
