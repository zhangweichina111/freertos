###############################################################################
#                                                                             #
#                                                       03/Jan/2016  16:21:35 #
# IAR ANSI C/C++ Compiler V6.40.4.24170/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\project\freertos\FreeRTOS\Demo\Common\Minimal\PollQ.c #
#    Command line =  D:\project\freertos\FreeRTOS\Demo\Common\Minimal\PollQ.c #
#                     -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN                   #
#                    D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\D #
#                    ebug\List\ --diag_suppress Pa082,pe191 -o                #
#                    D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\D #
#                    ebug\Obj\ --no_cse --no_unroll --no_inline               #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.4                           #
#                    Evaluation\arm\INC\c\DLib_Config_Full.h" -I              #
#                    D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\. #
#                    \ -I D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_ #
#                    IAR\STM32F10xFWLib\inc\ -I D:\project\freertos\FreeRTOS\ #
#                    Demo\CORTEX_STM32F103_IAR\..\..\Source\include\ -I       #
#                    D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\. #
#                    .\common\include\ -Ol --use_c++_inline                   #
#                    --require_prototypes                                     #
#    List file    =  D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\D #
#                    ebug\List\PollQ.lst                                      #
#    Object file  =  D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\D #
#                    ebug\Obj\PollQ.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

D:\project\freertos\FreeRTOS\Demo\Common\Minimal\PollQ.c
      1          /*
      2              FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
      3              All rights reserved
      4          
      5              VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
      6          
      7              This file is part of the FreeRTOS distribution.
      8          
      9              FreeRTOS is free software; you can redistribute it and/or modify it under
     10              the terms of the GNU General Public License (version 2) as published by the
     11              Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
     12          
     13              ***************************************************************************
     14              >>!   NOTE: The modification to the GPL is included to allow you to     !<<
     15              >>!   distribute a combined work that includes FreeRTOS without being   !<<
     16              >>!   obliged to provide the source code for proprietary components     !<<
     17              >>!   outside of the FreeRTOS kernel.                                   !<<
     18              ***************************************************************************
     19          
     20              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
     21              WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     22              FOR A PARTICULAR PURPOSE.  Full license text is available on the following
     23              link: http://www.freertos.org/a00114.html
     24          
     25              ***************************************************************************
     26               *                                                                       *
     27               *    FreeRTOS provides completely free yet professionally developed,    *
     28               *    robust, strictly quality controlled, supported, and cross          *
     29               *    platform software that is more than just the market leader, it     *
     30               *    is the industry's de facto standard.                               *
     31               *                                                                       *
     32               *    Help yourself get started quickly while simultaneously helping     *
     33               *    to support the FreeRTOS project by purchasing a FreeRTOS           *
     34               *    tutorial book, reference manual, or both:                          *
     35               *    http://www.FreeRTOS.org/Documentation                              *
     36               *                                                                       *
     37              ***************************************************************************
     38          
     39              http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
     40              the FAQ page "My application does not run, what could be wrong?".  Have you
     41              defined configASSERT()?
     42          
     43              http://www.FreeRTOS.org/support - In return for receiving this top quality
     44              embedded software for free we request you assist our global community by
     45              participating in the support forum.
     46          
     47              http://www.FreeRTOS.org/training - Investing in training allows your team to
     48              be as productive as possible as early as possible.  Now you can receive
     49              FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
     50              Ltd, and the world's leading authority on the world's leading RTOS.
     51          
     52              http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
     53              including FreeRTOS+Trace - an indispensable productivity tool, a DOS
     54              compatible FAT file system, and our tiny thread aware UDP/IP stack.
     55          
     56              http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
     57              Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
     58          
     59              http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
     60              Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
     61              licenses offer ticketed support, indemnification and commercial middleware.
     62          
     63              http://www.SafeRTOS.com - High Integrity Systems also provide a safety
     64              engineered and independently SIL3 certified version for use in safety and
     65              mission critical applications that require provable dependability.
     66          
     67              1 tab == 4 spaces!
     68          */
     69          
     70          /*
     71           * This version of PollQ. c is for use on systems that have limited stack
     72           * space and no display facilities.  The complete version can be found in
     73           * the Demo/Common/Full directory.
     74           *
     75           * Creates two tasks that communicate over a single queue.  One task acts as a
     76           * producer, the other a consumer.
     77           *
     78           * The producer loops for three iteration, posting an incrementing number onto the
     79           * queue each cycle.  It then delays for a fixed period before doing exactly the
     80           * same again.
     81           *
     82           * The consumer loops emptying the queue.  Each item removed from the queue is
     83           * checked to ensure it contains the expected value.  When the queue is empty it
     84           * blocks for a fixed period, then does the same again.
     85           *
     86           * All queue access is performed without blocking.  The consumer completely empties
     87           * the queue each time it runs so the producer should never find the queue full.
     88           *
     89           * An error is flagged if the consumer obtains an unexpected value or the producer
     90           * find the queue is full.
     91           */
     92          
     93          /*
     94          Changes from V2.0.0
     95          
     96          	+ Delay periods are now specified using variables and constants of
     97          	  TickType_t rather than uint32_t.
     98          */
     99          
    100          #include <stdlib.h>
    101          
    102          /* Scheduler include files. */
    103          #include "FreeRTOS.h"
    104          #include "task.h"
    105          #include "queue.h"
    106          
    107          /* Demo program include files. */
    108          #include "PollQ.h"
    109          
    110          #define pollqSTACK_SIZE			configMINIMAL_STACK_SIZE
    111          #define pollqQUEUE_SIZE			( 10 )
    112          #define pollqPRODUCER_DELAY		( ( TickType_t ) 200 / portTICK_PERIOD_MS )
    113          #define pollqCONSUMER_DELAY		( pollqPRODUCER_DELAY - ( TickType_t ) ( 20 / portTICK_PERIOD_MS ) )
    114          #define pollqNO_DELAY			( ( TickType_t ) 0 )
    115          #define pollqVALUES_TO_PRODUCE	( ( BaseType_t ) 3 )
    116          #define pollqINITIAL_VALUE		( ( BaseType_t ) 0 )
    117          
    118          /* The task that posts the incrementing number onto the queue. */
    119          static portTASK_FUNCTION_PROTO( vPolledQueueProducer, pvParameters );
    120          
    121          /* The task that empties the queue. */
    122          static portTASK_FUNCTION_PROTO( vPolledQueueConsumer, pvParameters );
    123          
    124          /* Variables that are used to check that the tasks are still running with no
    125          errors. */
    126          static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;
    127          
    128          /*-----------------------------------------------------------*/
    129          
    130          void vStartPolledQueueTasks( UBaseType_t uxPriority )
    131          {
    132          static QueueHandle_t xPolledQueue;
    133          
    134          	/* Create the queue used by the producer and consumer. */
    135          	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
    136          
    137          	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
    138          	in use.  The queue registry is provided as a means for kernel aware 
    139          	debuggers to locate queues and has no purpose if a kernel aware debugger
    140          	is not being used.  The call to vQueueAddToRegistry() will be removed
    141          	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
    142          	defined to be less than 1. */
    143          	vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );
    144          
    145          	/* Spawn the producer and consumer. */
    146          	xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
    147          	xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
    148          }
    149          /*-----------------------------------------------------------*/
    150          
    151          static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
    152          {
    153          uint16_t usValue = ( uint16_t ) 0;
    154          BaseType_t xError = pdFALSE, xLoop;
    155          
    156          	for( ;; )
    157          	{		
    158          		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
    159          		{
    160          			/* Send an incrementing number on the queue without blocking. */
    161          			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pdPASS )
    162          			{
    163          				/* We should never find the queue full so if we get here there
    164          				has been an error. */
    165          				xError = pdTRUE;
    166          			}
    167          			else
    168          			{
    169          				if( xError == pdFALSE )
    170          				{
    171          					/* If an error has ever been recorded we stop incrementing the
    172          					check variable. */
    173          					portENTER_CRITICAL();
    174          						xPollingProducerCount++;
    175          					portEXIT_CRITICAL();
    176          				}
    177          
    178          				/* Update the value we are going to post next time around. */
    179          				usValue++;
    180          			}
    181          		}
    182          
    183          		/* Wait before we start posting again to ensure the consumer runs and
    184          		empties the queue. */
    185          		vTaskDelay( pollqPRODUCER_DELAY );
    186          	}
    187          }  /*lint !e818 Function prototype must conform to API. */
    188          /*-----------------------------------------------------------*/
    189          
    190          static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
    191          {
    192          uint16_t usData, usExpectedValue = ( uint16_t ) 0;
    193          BaseType_t xError = pdFALSE;
    194          
    195          	for( ;; )
    196          	{		
    197          		/* Loop until the queue is empty. */
    198          		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
    199          		{
    200          			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
    201          			{
    202          				if( usData != usExpectedValue )
    203          				{
    204          					/* This is not what we expected to receive so an error has
    205          					occurred. */
    206          					xError = pdTRUE;
    207          
    208          					/* Catch-up to the value we received so our next expected
    209          					value should again be correct. */
    210          					usExpectedValue = usData;
    211          				}
    212          				else
    213          				{
    214          					if( xError == pdFALSE )
    215          					{
    216          						/* Only increment the check variable if no errors have
    217          						occurred. */
    218          						portENTER_CRITICAL();
    219          							xPollingConsumerCount++;
    220          						portEXIT_CRITICAL();
    221          					}
    222          				}
    223          
    224          				/* Next time round we would expect the number to be one higher. */
    225          				usExpectedValue++;
    226          			}
    227          		}
    228          
    229          		/* Now the queue is empty we block, allowing the producer to place more
    230          		items in the queue. */
    231          		vTaskDelay( pollqCONSUMER_DELAY );
    232          	}
    233          } /*lint !e818 Function prototype must conform to API. */
    234          /*-----------------------------------------------------------*/
    235          
    236          /* This is called to check that all the created tasks are still running with no errors. */
    237          BaseType_t xArePollingQueuesStillRunning( void )
    238          {
    239          BaseType_t xReturn;
    240          
    241          	/* Check both the consumer and producer poll count to check they have both
    242          	been changed since out last trip round.  We do not need a critical section
    243          	around the check variables as this is called from a higher priority than
    244          	the other tasks that access the same variables. */
    245          	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
    246          		( xPollingProducerCount == pollqINITIAL_VALUE )
    247          	  )
    248          	{
    249          		xReturn = pdFALSE;
    250          	}
    251          	else
    252          	{
    253          		xReturn = pdTRUE;
    254          	}
    255          
    256          	/* Set the check variables back down so we know if they have been
    257          	incremented the next time around. */
    258          	xPollingConsumerCount = pollqINITIAL_VALUE;
    259          	xPollingProducerCount = pollqINITIAL_VALUE;
    260          
    261          	return xReturn;
    262          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  vPolledQueueConsumer
              8 -> uxQueueMessagesWaiting
              8 -> vPortEnterCritical
              8 -> vPortExitCritical
              8 -> vTaskDelay
              8 -> xQueueGenericReceive
        8  vPolledQueueProducer
              8 -> vPortEnterCritical
              8 -> vPortExitCritical
              8 -> vTaskDelay
              8 -> xQueueGenericSend
       32  vStartPolledQueueTasks
             32 -> xQueueGenericCreate
             32 -> xTaskGenericCreate
        0  xArePollingQueuesStillRunning


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "QConsNB">
       8  ?<Constant "QProdNB">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
      86  vPolledQueueConsumer
      82  vPolledQueueProducer
      88  vStartPolledQueueTasks
      36  xArePollingQueuesStillRunning
       4  xPolledQueue
       4  xPollingConsumerCount
       4  xPollingProducerCount

 
  12 bytes in section .bss
  16 bytes in section .rodata
 312 bytes in section .text
 
 312 bytes of CODE  memory
  16 bytes of CONST memory
  12 bytes of DATA  memory

Errors: none
Warnings: none
