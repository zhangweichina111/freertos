###############################################################################
#                                                                             #
#                                                       03/Jan/2016  16:21:35 #
# IAR ANSI C/C++ Compiler V6.40.4.24170/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\project\freertos\FreeRTOS\Source\portable\MemMang\hea #
#                    p_2.c                                                    #
#    Command line =  D:\project\freertos\FreeRTOS\Source\portable\MemMang\hea #
#                    p_2.c -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN              #
#                    D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\D #
#                    ebug\List\ --diag_suppress Pa082,pe191 -o                #
#                    D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\D #
#                    ebug\Obj\ --no_cse --no_unroll --no_inline               #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.4                           #
#                    Evaluation\arm\INC\c\DLib_Config_Full.h" -I              #
#                    D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\. #
#                    \ -I D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_ #
#                    IAR\STM32F10xFWLib\inc\ -I D:\project\freertos\FreeRTOS\ #
#                    Demo\CORTEX_STM32F103_IAR\..\..\Source\include\ -I       #
#                    D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\. #
#                    .\common\include\ -Ol --use_c++_inline                   #
#                    --require_prototypes                                     #
#    List file    =  D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\D #
#                    ebug\List\heap_2.lst                                     #
#    Object file  =  D:\project\freertos\FreeRTOS\Demo\CORTEX_STM32F103_IAR\D #
#                    ebug\Obj\heap_2.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\project\freertos\FreeRTOS\Source\portable\MemMang\heap_2.c
      1          /*
      2              FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
      3              All rights reserved
      4          
      5              VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
      6          
      7              This file is part of the FreeRTOS distribution.
      8          
      9              FreeRTOS is free software; you can redistribute it and/or modify it under
     10              the terms of the GNU General Public License (version 2) as published by the
     11              Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
     12          
     13              ***************************************************************************
     14              >>!   NOTE: The modification to the GPL is included to allow you to     !<<
     15              >>!   distribute a combined work that includes FreeRTOS without being   !<<
     16              >>!   obliged to provide the source code for proprietary components     !<<
     17              >>!   outside of the FreeRTOS kernel.                                   !<<
     18              ***************************************************************************
     19          
     20              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
     21              WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     22              FOR A PARTICULAR PURPOSE.  Full license text is available on the following
     23              link: http://www.freertos.org/a00114.html
     24          
     25              ***************************************************************************
     26               *                                                                       *
     27               *    FreeRTOS provides completely free yet professionally developed,    *
     28               *    robust, strictly quality controlled, supported, and cross          *
     29               *    platform software that is more than just the market leader, it     *
     30               *    is the industry's de facto standard.                               *
     31               *                                                                       *
     32               *    Help yourself get started quickly while simultaneously helping     *
     33               *    to support the FreeRTOS project by purchasing a FreeRTOS           *
     34               *    tutorial book, reference manual, or both:                          *
     35               *    http://www.FreeRTOS.org/Documentation                              *
     36               *                                                                       *
     37              ***************************************************************************
     38          
     39              http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
     40              the FAQ page "My application does not run, what could be wrong?".  Have you
     41              defined configASSERT()?
     42          
     43              http://www.FreeRTOS.org/support - In return for receiving this top quality
     44              embedded software for free we request you assist our global community by
     45              participating in the support forum.
     46          
     47              http://www.FreeRTOS.org/training - Investing in training allows your team to
     48              be as productive as possible as early as possible.  Now you can receive
     49              FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
     50              Ltd, and the world's leading authority on the world's leading RTOS.
     51          
     52              http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
     53              including FreeRTOS+Trace - an indispensable productivity tool, a DOS
     54              compatible FAT file system, and our tiny thread aware UDP/IP stack.
     55          
     56              http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
     57              Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
     58          
     59              http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
     60              Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
     61              licenses offer ticketed support, indemnification and commercial middleware.
     62          
     63              http://www.SafeRTOS.com - High Integrity Systems also provide a safety
     64              engineered and independently SIL3 certified version for use in safety and
     65              mission critical applications that require provable dependability.
     66          
     67              1 tab == 4 spaces!
     68          */
     69          
     70          /*
     71           * A sample implementation of pvPortMalloc() and vPortFree() that permits
     72           * allocated blocks to be freed, but does not combine adjacent free blocks
     73           * into a single larger block (and so will fragment memory).  See heap_4.c for
     74           * an equivalent that does combine adjacent blocks into single larger blocks.
     75           *
     76           * See heap_1.c, heap_3.c and heap_4.c for alternative implementations, and the
     77           * memory management pages of http://www.FreeRTOS.org for more information.
     78           */
     79          #include <stdlib.h>
     80          
     81          /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
     82          all the API functions to use the MPU wrappers.  That should only be done when
     83          task.h is included from an application file. */
     84          #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
     85          
     86          #include "FreeRTOS.h"
     87          #include "task.h"
     88          
     89          #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
     90          
     91          /* A few bytes might be lost to byte aligning the heap start address. */
     92          #define configADJUSTED_HEAP_SIZE	( configTOTAL_HEAP_SIZE - portBYTE_ALIGNMENT )
     93          
     94          /*
     95           * Initialises the heap structures before their first use.
     96           */
     97          static void prvHeapInit( void );
     98          
     99          /* Allocate the memory for the heap. */
    100          #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
    101          	/* The application writer has already defined the array used for the RTOS
    102          	heap - probably so it can be placed in a special segment or address. */
    103          	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
    104          #else
    105          	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
    106          #endif /* configAPPLICATION_ALLOCATED_HEAP */
    107          
    108          
    109          /* Define the linked list structure.  This is used to link free blocks in order
    110          of their size. */
    111          typedef struct A_BLOCK_LINK
    112          {
    113          	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
    114          	size_t xBlockSize;						/*<< The size of the free block. */
    115          } BlockLink_t;
    116          
    117          
    118          static const uint16_t heapSTRUCT_SIZE	= ( ( sizeof ( BlockLink_t ) + ( portBYTE_ALIGNMENT - 1 ) ) & ~portBYTE_ALIGNMENT_MASK );
    119          #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( heapSTRUCT_SIZE * 2 ) )
    120          
    121          /* Create a couple of list links to mark the start and end of the list. */
    122          static BlockLink_t xStart, xEnd;
    123          
    124          /* Keeps track of the number of free bytes remaining, but says nothing about
    125          fragmentation. */
    126          static size_t xFreeBytesRemaining = configADJUSTED_HEAP_SIZE;
    127          
    128          /* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */
    129          
    130          /*
    131           * Insert a block into the list of free blocks - which is ordered by size of
    132           * the block.  Small blocks at the start of the list and large blocks at the end
    133           * of the list.
    134           */
    135          #define prvInsertBlockIntoFreeList( pxBlockToInsert )								\
    136          {																					\
    137          BlockLink_t *pxIterator;															\
    138          size_t xBlockSize;																	\
    139          																					\
    140          	xBlockSize = pxBlockToInsert->xBlockSize;										\
    141          																					\
    142          	/* Iterate through the list until a block is found that has a larger size */	\
    143          	/* than the block we are inserting. */											\
    144          	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock->xBlockSize < xBlockSize; pxIterator = pxIterator->pxNextFreeBlock )	\
    145          	{																				\
    146          		/* There is nothing to do here - just iterate to the correct position. */	\
    147          	}																				\
    148          																					\
    149          	/* Update the list to include the block being inserted in the correct */		\
    150          	/* position. */																	\
    151          	pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;					\
    152          	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
    153          }
    154          /*-----------------------------------------------------------*/
    155          
    156          void *pvPortMalloc( size_t xWantedSize )
    157          {
    158          BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
    159          static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    160          void *pvReturn = NULL;
    161          
    162          	vTaskSuspendAll();
    163          	{
    164          		/* If this is the first call to malloc then the heap will require
    165          		initialisation to setup the list of free blocks. */
    166          		if( xHeapHasBeenInitialised == pdFALSE )
    167          		{
    168          			prvHeapInit();
    169          			xHeapHasBeenInitialised = pdTRUE;
    170          		}
    171          
    172          		/* The wanted size is increased so it can contain a BlockLink_t
    173          		structure in addition to the requested amount of bytes. */
    174          		if( xWantedSize > 0 )
    175          		{
    176          			xWantedSize += heapSTRUCT_SIZE;
    177          
    178          			/* Ensure that blocks are always aligned to the required number of bytes. */
    179          			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    180          			{
    181          				/* Byte alignment required. */
    182          				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    183          			}
    184          		}
    185          
    186          		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    187          		{
    188          			/* Blocks are stored in byte order - traverse the list from the start
    189          			(smallest) block until one of adequate size is found. */
    190          			pxPreviousBlock = &xStart;
    191          			pxBlock = xStart.pxNextFreeBlock;
    192          			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    193          			{
    194          				pxPreviousBlock = pxBlock;
    195          				pxBlock = pxBlock->pxNextFreeBlock;
    196          			}
    197          
    198          			/* If we found the end marker then a block of adequate size was not found. */
    199          			if( pxBlock != &xEnd )
    200          			{
    201          				/* Return the memory space - jumping over the BlockLink_t structure
    202          				at its start. */
    203          				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    204          
    205          				/* This block is being returned for use so must be taken out of the
    206          				list of free blocks. */
    207          				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    208          
    209          				/* If the block is larger than required it can be split into two. */
    210          				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    211          				{
    212          					/* This block is to be split into two.  Create a new block
    213          					following the number of bytes requested. The void cast is
    214          					used to prevent byte alignment warnings from the compiler. */
    215          					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    216          
    217          					/* Calculate the sizes of two blocks split from the single
    218          					block. */
    219          					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    220          					pxBlock->xBlockSize = xWantedSize;
    221          
    222          					/* Insert the new block into the list of free blocks. */
    223          					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    224          				}
    225          
    226          				xFreeBytesRemaining -= pxBlock->xBlockSize;
    227          			}
    228          		}
    229          
    230          		traceMALLOC( pvReturn, xWantedSize );
    231          	}
    232          	( void ) xTaskResumeAll();
    233          
    234          	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
    235          	{
    236          		if( pvReturn == NULL )
    237          		{
    238          			extern void vApplicationMallocFailedHook( void );
    239          			vApplicationMallocFailedHook();
    240          		}
    241          	}
    242          	#endif
    243          
    244          	return pvReturn;
    245          }
    246          /*-----------------------------------------------------------*/
    247          
    248          void vPortFree( void *pv )
    249          {
    250          uint8_t *puc = ( uint8_t * ) pv;
    251          BlockLink_t *pxLink;
    252          
    253          	if( pv != NULL )
    254          	{
    255          		/* The memory being freed will have an BlockLink_t structure immediately
    256          		before it. */
    257          		puc -= heapSTRUCT_SIZE;
    258          
    259          		/* This unexpected casting is to keep some compilers from issuing
    260          		byte alignment warnings. */
    261          		pxLink = ( void * ) puc;
    262          
    263          		vTaskSuspendAll();
    264          		{
    265          			/* Add this block to the list of free blocks. */
    266          			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    267          			xFreeBytesRemaining += pxLink->xBlockSize;
    268          			traceFREE( pv, pxLink->xBlockSize );
    269          		}
    270          		( void ) xTaskResumeAll();
    271          	}
    272          }
    273          /*-----------------------------------------------------------*/
    274          
    275          size_t xPortGetFreeHeapSize( void )
    276          {
    277          	return xFreeBytesRemaining;
    278          }
    279          /*-----------------------------------------------------------*/
    280          
    281          void vPortInitialiseBlocks( void )
    282          {
    283          	/* This just exists to keep the linker quiet. */
    284          }
    285          /*-----------------------------------------------------------*/
    286          
    287          static void prvHeapInit( void )
    288          {
    289          BlockLink_t *pxFirstFreeBlock;
    290          uint8_t *pucAlignedHeap;
    291          
    292          	/* Ensure the heap starts on a correctly aligned boundary. */
    293          	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    294          
    295          	/* xStart is used to hold a pointer to the first item in the list of free
    296          	blocks.  The void cast is used to prevent compiler warnings. */
    297          	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    298          	xStart.xBlockSize = ( size_t ) 0;
    299          
    300          	/* xEnd is used to mark the end of the list of free blocks. */
    301          	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    302          	xEnd.pxNextFreeBlock = NULL;
    303          
    304          	/* To start with there is a single free block that is sized to take up the
    305          	entire heap space. */
    306          	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    307          	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    308          	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    309          }
    310          /*-----------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  prvHeapInit
       16  pvPortMalloc
             16 -> prvHeapInit
             16 -> vTaskSuspendAll
             16 -> xTaskResumeAll
        8  vPortFree
              8 -> vTaskSuspendAll
              8 -> xTaskResumeAll
        0  vPortInitialiseBlocks
        0  xPortGetFreeHeapSize


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       2  heapSTRUCT_SIZE
      42  prvHeapInit
     176  pvPortMalloc
   17408  ucHeap
      60  vPortFree
       2  vPortInitialiseBlocks
       8  xEnd
       4  xFreeBytesRemaining
       4  xHeapHasBeenInitialised
       6  xPortGetFreeHeapSize
       8  xStart

 
 17 428 bytes in section .bss
      4 bytes in section .data
      2 bytes in section .rodata
    310 bytes in section .text
 
    310 bytes of CODE  memory
      2 bytes of CONST memory
 17 432 bytes of DATA  memory

Errors: none
Warnings: none
